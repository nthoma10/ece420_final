

int n = num_nodes;
int n_voltages = num_fixed_voltages;

double[] rhs = new double[n];
double[] voltages = new double[n];
double[][] mat = new double[n][n];
double[][] R = new double[n][n];
double[][] network_mat = new double[n][n];

//voltages contains all voltage sources values
//R contains all resistor values

for(int i = 0; i < n; i++){
    for(int j = 0; j < n; j++){
        if(R[i][j] != 0 && i != j)
            network_mat[i][j] = -1 / R[i][j];
    }
}

for(int i = 0; i < n; i++){
    for(int j = 0; j < n; j++){
        if(i == j){
          double summation = 0;
          for(int k = 0; k < n; k++){
              if(R[i][j] != 0){
                summation = summation + (1/R[i][k]);
              }
          network_mat[i][j] = summmation;
          }
        }
    }
}

double[] index = new double[n]; //voltage index
double[][] mat = newwork_mat.clone();
for(int i = 0; i < index.length; i++){
      double inx = index[i];
      for(int j = 0; j < n; j++){
        mat[idx][j] = 0;
      }
      mat[idx][idx] = 1;

}
/*for(int i = 0; i < n_voltages; i++){
  rhs[i] = voltages[i];
}

for(int i = 0; i < n; i++){
    for(int j = 0; j < n; j++){
      if(i == 0 && j == 0)
         mat[i][j] = 1;
      else if(i == 0 && j != 0)
         mat[i][j] = 0;
      else if(i == n-1 && j == n-1)
         mat[i][j] = 1;
      else if(i == n-1 && j != n-1)
         mat[i][j] = 0;
      else
         mat[i][j] = network_mat[i][j];
    }
}*/

//use JAMA package

Matrix A = new Matrix(mat);
Matrix b = new Matrix(rhs);
Matrix x = A.solve(b) //voltages of each node
